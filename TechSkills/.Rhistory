row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(n = sum(SOC.Count), avgvalue = mean(Value)) # skills summary
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills2, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(n = sum(SOC.Count), avgvalue = mean(Value)) %>% # skills summary
arrange(avgvalue)
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills2, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(n = sum(SOC.Count), avgvalue = mean(Value)) %>% # skills summary
arrange(desc(avgvalue))
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills2, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(n = sum(SOC.Count), avgvalue = mean(Value)) %>% # skills summary
top_n(5, avgvalue) %>% # select top 5 avg value skills
arrange(desc(avgvalue)) # sort
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills2, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(n = sum(SOC.Count), avgvalue = mean(Value)) %>% # skills summary
top_n(5, avgvalue) %>% # select top 5 avg value skills
arrange(desc(avgvalue)) # sort
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills2, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(n = sum(SOC.Count), avgvalue = mean(Value)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills2, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills2, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
require(XML) #for reading xml, html
require(stringr) #for regex
require(curl)
require(tidyr)
require(dplyr)
require(ggplot2)
require(plotly)
require(knitr)
require(kableExtra)
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Skills.txt", "Skills.txt")
df<- read.table("Skills.txt", sep = '\t', header = TRUE)
df <- df[grep("15-", df$O.NET.SOC.Code),]
df <- df[grep(".00$", df$O.NET.SOC.Code),] # limit SOC Code to major groups only
df <- df[grep("IM", df$Scale.ID),] # only cares about importance data
df <- df[grep("N", df$Recommend.Suppress),] # only cares about unsuppressed data
skillsdf <- data.frame(df$O.NET.SOC.Code, df$Element.Name, df$Data.Value)
head(df)
head(skillsdf)
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::table(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::table(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
df.Skills
t <- knitr::kable(count, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
df.Skills
t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
require(XML) #for reading xml, html
require(stringr) #for regex
require(curl)
require(tidyr)
require(dplyr)
require(ggplot2)
require(plotly)
require(knitr)
require(kableExtra)
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Skills.txt", "Skills.txt")
df<- read.table("Skills.txt", sep = '\t', header = TRUE)
df <- df[grep("15-", df$O.NET.SOC.Code),]
df <- df[grep(".00$", df$O.NET.SOC.Code),] # limit SOC Code to major groups only
df <- df[grep("IM", df$Scale.ID),] # only cares about importance data
df <- df[grep("N", df$Recommend.Suppress),] # only cares about unsuppressed data
skillsdf <- data.frame(df$O.NET.SOC.Code, df$Element.Name, df$Data.Value)
head(df)
head(skillsdf)
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
df.Skills
t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
View(wideskills)
View(wideskills)
require(rvest)
require(dplyr)
require(stringr)
require(tidyr)
require(dplyr)
require(ggplot2)
BLS_EP_URL <- read_html("https://www.bls.gov/emp/tables/occupational-projections-and-characteristics.htm")
OccProj <- html_nodes(BLS_EP_URL, "table")
head(OccProj)
OccProj <- BLS_EP_URL %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE)
OccProj[[1]] <- OccProj[[1]][-1,]
colnames(OccProj[[1]]) <- c("Title", "Code", "OccupationType", "2016Employment", "2026Employment", "2016EmplChange2016-26", "2026EmplChange2016-26", "2016Self-Empl_Prcnt", "2016-26_AvgAnnual_OccOpenings", "2017MedianAnnualWage", "TypicalEntryLvlEduc", "PreEmplExperience", "PostEmplTraining")
OccProjTbl <- dplyr::tbl_df(OccProj[[1]])
Series15 <- dplyr::filter(OccProjTbl, grepl('15-', Code)) %>%
filter(grepl('Line item', OccupationType))
ggplot(Series15, aes(x = TypicalEntryLvlEduc, y = frequency(Code), fill=TypicalEntryLvlEduc)) +
guides(fill=FALSE, color=FALSE)+
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1")+
labs(title = "Typical education needed for entry for 15-000 Computer Occupation", x = "Education", y = "Frequency")
outlook.graphic <- ggplot(Series15, aes(x = PreEmplExperience, y = frequency(Code), fill=PreEmplExperience)) +
guides(fill=FALSE, color=FALSE)+
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1")+
labs(title = "Work experience in a related occupation for 15-000 Computer Occupation", x = "Experience", y = "Frequency")
outlook.graphic
View(Series15)
View(Series15)
suppressWarnings(source("outlook/outlook.R"))
suppressWarnings(source("outlook/outlook.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
outlook.graphic
outlook.graphic2
head(salary.frame, 5)
mean(as.numeric(salary.frame$Mean.Annual.Wage))
sd(as.numeric(salary.frame$Mean.Annual.Wage))
outlook.graphic
outlook.graphic2
outlook.graphic2
head(salary.frame, 5)
best_pay <-  max(as.numeric(salary.frame$Mean.Annual.Wage))
best_pay
head(skills.frame,5)
mean(as.numeric(salary.frame$Mean.Annual.Wage))
sd(as.numeric(salary.frame$Mean.Annual.Wage))
mean(as.numeric(salary.frame$Mean.Annual.Wage))
sd(as.numeric(salary.frame$Mean.Annual.Wage))
salary.vs.outlook <- na.omit(merge(salary.frame, outlook.frame, by = 'SOC', all = TRUE))
dollars <- as.numeric(salary.vs.outlook$Mean.Annual.Wage)
jobs <- as.numeric(salary.vs.outlook$`2016-26_AvgAnnual_OccOpenings`)
df <- data.frame(cbind(dollars,jobs))
ggplot(df, aes(x=dollars, y=jobs)) + geom_point()
TechToolsdf <- data.frame(df$O.NET.SOC.Code, df$Element.Name, df$Data.Value) #subsets fields for analysis
# Cleaning Data
df <- df[grep(".00$", df$O.NET.SOC.Code),] # limit SOC Code to major groups only
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechTools.txt")
wideskills <- TechToolsdf
TechToolsdf
read.table("TechTools.txt", sep = '\t', header = TRUE)
df<- read.table("TechTools.txt", sep = '\t', header = TRUE)
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechTools.txt")
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Skills.txt", "Skills.txt")
df<- read.table("Skills.txt", sep = '\t', header = TRUE)
df<- read.table("TechTools.txt", sep = '\t', header = TRUE)
suppressWarnings(library(ggplot2, quietly =TRUE)) #for graphs
View(df)
View(df)
df<- read.table("TechTools.txt", sep = '\t', header = TRUE)
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechTools.txt")
df<- read.table("TechTools.txt", sep = '\t', header = TRUE)
df<- read.table("TechSkills.txt", sep = '\t', header = TRUE)
try(setwd('TechSkills'))
try(setwd('TechSkills'))
try(setwd('TechSkills'))
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechSkills.txt")
suppressWarnings(library(XML, quietly =TRUE)) #for reading xml, html
suppressWarnings(library(stringr, quietly =TRUE)) #for regex
suppressWarnings(library(curl, quietly =TRUE)) #for downloading url file
suppressWarnings(library(tidyr, quietly =TRUE)) #for data manipulation
suppressWarnings(library(dplyr, quietly =TRUE)) #for data manipulation
suppressWarnings(library(ggplot2, quietly =TRUE)) #for graphs
suppressWarnings(library(knitr, quietly =TRUE)) #for table design
suppressWarnings(library(kableExtra, quietly =TRUE)) #for table design
source('~/GitHub/data-skills/TechSkills/TechSkills.R', echo=TRUE)
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechSkills.txt")
df<- read.table("TechSkills.txt", sep = '\t', header = TRUE)
df <- df[grep("15-", df$O.NET.SOC.Code),]
df<- read.table("TechSkills.txt", sep = '\t', header = TRUE)
df <- df[grep("15-", df$O.NET.SOC.Code),]
try(setwd('TechSkills'))
setwd("TechSkills")
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechSkills.txt")
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechSkills.txt")
df<- read.table("TechSkills.txt", sep = '\t', header = TRUE)
setwd("~/GitHub/data-skills/TechSkills")
try(setwd('TechSkills'))
df<- read.table("TechSkills.txt", sep = '\t', header = TRUE)
