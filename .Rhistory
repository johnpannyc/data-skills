# Ham and Spam 1
table <- merge(x = ham.freq, y = spam.freq, by = 'string', all.x = TRUE)
table <- table %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
colnames(table) <- c('string', 'ham.count', 'spam1.count')
row.names(table) <- NULL
# Ham, Spam 1, and Spam 2
table2 <- merge(x = table, y = test.freq, by = 'string', all.x = TRUE)
table2 <- table2 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
colnames(table2) <- c('string', 'ham.count', 'spam1.count', 'spam2.count')
row.names(table2) <- NULL
value1 <- chisq.test(table$ham.count, table$spam1.count)
value2 <- chisq.test(table2$ham.count, table2$spam2.count)
value3 <- chisq.test(table2$spam1.count, table2$spam2.count)
value1
value2
value3
foo <- file.path[4] %>% DirSource() %>% VCorpus()
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table2, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
table3
cor(table3$ham.count, table3$test.case)
cor(table3$spam1.count, table3$test.case)
foo <- file.path[4] %>% DirSource() %>% VCorpus()
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
table3
cor(table3$ham.count, table3$test.case)
cor(table3$spam1.count, table3$test.case)
foo <- file.path[4] %>% DirSource() %>% VCorpus()
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
cor(table3$ham.count, table3$test.case)
cor(table3$spam1.count, table3$test.case)
foo <- file.path[4] %>% DirSource() %>% VCorpus()
spam-classifier <- function(foo){
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
a <- cor(table3$ham.count, table3$test.case)
b <- cor(table3$spam1.count, table3$test.case)
if (a > b){
print("test case is not spam")
} elif (a = b){
foo <- file.path[4] %>% DirSource() %>% VCorpus()
spam-classifier <- function(foo){
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
a <- cor(table3$ham.count, table3$test.case)
b <- cor(table3$spam1.count, table3$test.case)
if (a > b){
return("test case is not spam")
} elif (a = b){
foo <- file.path[4] %>% DirSource() %>% VCorpus()
spam-classifier <- function(foo){
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
a <- cor(table3$ham.count, table3$test.case)
b <- cor(table3$spam1.count, table3$test.case)
if (a > b){
return("test case is not spam")
} else if (a = b){
foo <- file.path[4] %>% DirSource() %>% VCorpus()
spam-classifier <- function(foo){
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
a <- cor(table3$ham.count, table3$test.case)
b <- cor(table3$spam1.count, table3$test.case)
if (a > b){
return("test case is not spam")
} else if (a == b){
return("we cannot draw a conclusion")
} else{
return("test case is spam")
}
}
foo <- file.path[4] %>% DirSource() %>% VCorpus()
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
a <- cor(table3$ham.count, table3$test.case)
b <- cor(table3$spam1.count, table3$test.case)
if (a > b){
return("test case is not spam")
} else if (a == b){
return("we cannot draw a conclusion")
} else{
return("test case is spam")
}
foo <- file.path[4] %>% DirSource() %>% VCorpus()
foo <- foo %>% clean()
foo <- foo %>% DocumentTermMatrix()
foo <- foo %>% as.matrix %>% colSums() %>% as.data.frame() %>% rownames_to_column("string")
colnames(foo) <- c('string', 'test.case')
table3 <- merge(x = table, y = foo, by = 'string', all.x=TRUE)
table3 <- table3 %>% mutate_all(funs(replace(., is.na(.), 0))) %>% as.data.frame()
a <- cor(table3$ham.count, table3$test.case)
b <- cor(table3$spam1.count, table3$test.case)
if (a > b){
print("test case is not spam")
} else if (a == b){
print("we cannot draw a conclusion")
} else{
print("test case is spam")
}
# Create/Populate tables with data from the dataframes
dbWriteTable(mydb,"indeed.ca", indeed.ca, overwrite = TRUE)
library(sqldf)
library (tidyverse)
mydb <- dbConnect(RSQLite::SQLite(), "Proj3_607.db")
# List out how many tables are in this object
dbListTables(mydb)
# TEST, to get query from this database (ONET Characteristic table only for now)
dbGetQuery  (mydb,"Select* FROM C")
# Load csv file containing foreign key into a dataframe
indeed.ca <- read.csv("indeed_keyword_count_ca.csv")
indeed.ny <- read.csv("indeed_keyword_count_ny.csv")
characteristics <- read.csv ("characteristics.csv")
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(mydb,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(mydb,"indeed.ny", indeed.ny, overwrite = TRUE)
## TODO: Innter Join and store as a db
dbWriteTable(mydb,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(mydb,"salary", salary, overwrite = TRUE)
dbWriteTable(mydb,"skills", skills, overwrite = TRUE)
dbWriteTable(mydb,"tech.skills", tech.skills, overwrite = TRUE)
data-skills <- dbConnect(RSQLite::SQLite(), "data-skills.db")
con <- DBI::dbConnect(RMySQL::MySQL(),
host = "database.rstudio.com",
user = "hadley",
password = rstudioapi::askForPassword("Database password")
)
con <- DBI::dbConnect(RMySQL::MySQL(),
host = "database.rstudio.com",
user = "hadley",
password = rstudioapi::askForPassword("Database password")
)
install.packages("RMySQL")
con <- DBI::dbConnect(RMySQL::MySQL(),
host = "database.rstudio.com",
user = "hadley",
password = rstudioapi::askForPassword("Database password")
)
library(sqldf)
library (tidyverse)
library(RMySQL)
try(setwd(dir = "csvs/"))
con <- DBI::dbConnect(RMySQL::MySQL(),
host = "database.rstudio.com",
user = "hadley",
password = rstudioapi::askForPassword("Database password")
)
con <- DBI::dbConnect(RMySQL::MySQL(),
host = "database.rstudio.com",
user = "hadley",
password = rstudioapi::askForPassword("Database password")
)
library(sqldf)
library (tidyverse)
library(RMySQL)
dbWriteTable(data-skills,"characteristics", characteristics, overwrite = TRUE)
characteristics <- read.csv ("characteristics.csv",)
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(data-skills,"indeed.ca", indeed.ca, overwrite = TRUE)
library(sqldf)
library (tidyverse)
library(RMySQLite)
library(sqldf)
library (tidyverse)
library(RSQLite)
characteristics <- read.csv ("characteristics.csv",)
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(data-skills,"indeed.ca", indeed.ca, overwrite = TRUE)
data-skill <- dbConnect(SQLite())
library(sqldf)
library (tidyverse)
library(RSQLite)
dbConnect(SQLite())
data-skills <- dbConnect(SQLite())
data.skills <- dbConnect(SQLite())
dbWriteTable(data.skills,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills,"tech.skills", tech.skills, overwrite = TRUE)
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills,"indeed.ny", indeed.ny, overwrite = TRUE)
## TODO: Inner Join and store as a db
characteristics <- read.csv ("characteristics.csv",)
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Load csv file containing foreign key into a dataframe
indeed.ca <- read.csv("indeed_keyword_count_ca.csv")
indeed.ny <- read.csv("indeed_keyword_count_ny.csv")
data.skills <- dbConnect(SQLite())
dbWriteTable(data.skills,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills,"tech.skills", tech.skills, overwrite = TRUE)
dbWriteTable(data.skills,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills,"tech.skills", tech.skills, overwrite = TRUE)
data.skills <- dbConnect(SQLite(), ":memory:")
dbListTables(data.skills)
dbListTables(data.skills)
dbListTables(data.skills)
dbListTables(data.skills)
characteristics <- read.csv ("characteristics.csv",)
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills,"indeed.ny", indeed.ny, overwrite = TRUE)
## TODO: Inner Join and store as a db
dbWriteTable(data.skills,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills,"tech.skills", tech.skills, overwrite = TRUE)
dbListTables(data.skills)
library (tidyverse)
library(RSQLite)
try(setwd(dir = "csvs/"))
data.skills <- dbConnect(SQLite(), ":memory:")
dbListTables(data.skills)
# Load csv file containing foreign key into a dataframe
indeed.ca <- read.csv("indeed_keyword_count_ca.csv")
indeed.ny <- read.csv("indeed_keyword_count_ny.csv")
characteristics <- read.csv ("characteristics.csv",)
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills,"indeed.ny", indeed.ny, overwrite = TRUE)
## TODO: Inner Join and store as a db
library (tidyverse)
library(RSQLite)
try(setwd(dir = "csvs/"))
data.skills.db <- dbConnect(SQLite(), ":memory:")
dbListTables(data.skills.db)
# Load csv file containing foreign key into a dataframe
indeed.ca <- read.csv("indeed_keyword_count_ca.csv")
indeed.ny <- read.csv("indeed_keyword_count_ny.csv")
characteristics <- read.csv ("characteristics.csv",)
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills.db,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills.db,"indeed.ny", indeed.ny, overwrite = TRUE)
## TODO: Inner Join and store as a db
dbWriteTable(data.skills.db,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills.db,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills.db,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills.db,"tech.skills", tech.skills, overwrite = TRUE)
dbListTables(data.skills.db)
dbListTables(data.skills.db)
library (tidyverse)
library(RSQLite)
library(DBI)
data.skills.db <- dbConnect(SQLite(), ":memory:")
dbListTables(data.skills.db)
query <- "ALTER TABLE characteristics
ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
query <- "ALTER TABLE characteristics
ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
query
query <- "ALTER TABLE characteristics ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
query <- "ALTER TABLE characteristics; ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
query <- "ALTER TABLE characteristics; ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
test <- dbSendQuery(data.skills.db, "SELECT * FROM characteristics")
dbListTables(data.skills.db)
query <- "ALTER TABLE characteristics; ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
test <- dbSendQuery(data.skills.db, "SELECT * FROM characteristics")
dbWriteTable(data.skills.db,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills.db,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills.db,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills.db,"tech.skills", tech.skills, overwrite = TRUE)
dbListTables(data.skills.db)
query <- "ALTER TABLE characteristics; ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
test <- dbSendQuery(data.skills.db, "SELECT * FROM characteristics")
query <- "ALTER TABLE characteristics; ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
test <- dbSendQuery(data.skills.db, "SELECT * FROM characteristics")
test
query <- "ALTER TABLE characteristics; ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
test <- dbSendQuery(data.skills.db, query)
query <- "ALTER TABLE characteristics ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
test <- dbSendQuery(data.skills.db, query)
query <- "ALTER TABLE characteristics\n ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
test <- dbSendQuery(data.skills.db, query)
query <- "ALTER TABLE characteristics AND ADD salary.SOC integer constraint fk foreign key references sakary(SOC)"
test <- dbSendQuery(data.skills.db, query)
dbAddKey(conn, name = c("characteristics", "salary", "skills","tech.skills"), colname = "SOC", type = "foreign", reference =c("characteristics", "salary", "skills","tech.skills"), colref = "SOC", exec = FALSE)
install.packages('rpostgis')
library (tidyverse)
library(RSQLite)
library(DBI)
library(rpostgis)
library (tidyverse)
library(RSQLite)
library(DBI)
library(rpostgis)
library (tidyverse)
library(RSQLite)
library(DBI)
library(rpostgis)
library (tidyverse)
library(RSQLite)
library(DBI)
library(rpostgis)
install.packages('rpostgis')
library (tidyverse)
library(RSQLite)
library(DBI)
library(rpostgis)
library (tidyverse)
library(RSQLite)
library(DBI)
try(setwd(dir = "csvs/"))
data.skills.db <- dbConnect(SQLite(), ":memory:")
dbListTables(data.skills.db)
# Load csv file containing foreign key into a dataframe
indeed.ca <- read.csv("indeed_keyword_count_ca.csv")
indeed.ny <- read.csv("indeed_keyword_count_ny.csv")
characteristics <- read.csv ("characteristics.csv",)
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills.db,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills.db,"indeed.ny", indeed.ny, overwrite = TRUE)
## TODO: Inner Join and store as a db
dbWriteTable(data.skills.db,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills.db,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills.db,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills.db,"tech.skills", tech.skills, overwrite = TRUE)
dbListTables(data.skills.db)
dbAddKey(conn, name = c("characteristics", "salary", "skills","tech.skills"), colname = "SOC", type = "foreign", reference =c("characteristics", "salary", "skills","tech.skills"), colref = "SOC", exec = FALSE)
data.skills.db
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
source('~/data-skills/tech_skills/tech-skills-list.R', echo=TRUE)
source('~/data-skills/tech_skills/tech-skills-list.R', echo=TRUE)
source('~/data-skills/tech_skills/tech-skills-list.R', echo=TRUE)
source('~/data-skills/tech_skills/tech-skills-list.R', echo=TRUE)
setwd("~/data-skills")
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("csvs/SQL.Rmd"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
source("csvs/SQL.Rmd")
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
source("csvs/SQL.R")
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
source("csvs/SQL.R")
source('~/data-skills/csvs/SQL.R', echo=TRUE)
source('~/data-skills/csvs/SQL.R', echo=TRUE)
setwd("~/data-skills/csvs")
source('~/data-skills/csvs/SQL.R', echo=TRUE)
source('~/data-skills/csvs/SQL.R', echo=TRUE)
source('~/data-skills/csvs/SQL.R', echo=TRUE)
source('~/data-skills/csvs/SQL.R', echo=TRUE)
source('~/data-skills/csvs/SQL.R', echo=TRUE)
source('~/data-skills/csvs/SQL.R', echo=TRUE)
source('~/data-skills/csvs/SQL.R', echo=TRUE)
library (tidyverse)
library(RSQLite)
library(DBI)
try(setwd(dir = "csvs/"))
data.skills.db <- dbConnect(SQLite(), ":memory:")
dbListTables(data.skills.db)
# Load csv file containing foreign key into a dataframe
indeed.ca <- read.csv("indeed_keyword_count_ca.csv")
indeed.ny <- read.csv("indeed_keyword_count_ny.csv")
characteristics <- read.csv ("characteristics.csv",)
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
characteristics <- read.csv ("characteristics.csv")
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills.db,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills.db,"indeed.ny", indeed.ny, overwrite = TRUE)
## TODO: Inner Join and store as a db
dbListTables(data.skills.db)
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills.db,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills.db,"indeed.ny", indeed.ny, overwrite = TRUE)
## TODO: Inner Join and store as a db
dbWriteTable(data.skills.db,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills.db,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills.db,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills.db,"tech.skills", tech.skills, overwrite = TRUE)
dbListTables(data.skills.db)
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills.db,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills.db,"indeed.ny", indeed.ny, overwrite = TRUE)
dbWriteTable(data.skills.db,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills.db,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills.db,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills.db,"tech.skills", tech.skills, overwrite = TRUE)
dbListTables(data.skills.db)
data.skills.db <- dbConnect(SQLite(), "db.sqlite")
dbListTables(data.skills.db)
# Load csv file containing foreign key into a dataframe
indeed.ca <- read.csv("indeed_keyword_count_ca.csv")
indeed.ny <- read.csv("indeed_keyword_count_ny.csv")
characteristics <- read.csv ("characteristics.csv")
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
library (tidyverse)
library(RSQLite)
library(DBI)
try(setwd(dir = "csvs/"))
data.skills.db <- dbConnect(SQLite(), "db.sqlite")
dbListTables(data.skills.db)
# Load csv file containing foreign key into a dataframe
indeed.ca <- read.csv("indeed_keyword_count_ca.csv")
indeed.ny <- read.csv("indeed_keyword_count_ny.csv")
characteristics <- read.csv ("characteristics.csv")
salary <- read.csv ("salary.csv")
skills <- read.csv ('skills.csv')
tech.skills <- read.csv('TechSkills.csv')
# Create/Populate tables with data from the dataframes
dbWriteTable(data.skills.db,"indeed.ca", indeed.ca, overwrite = TRUE)
dbWriteTable(data.skills.db,"indeed.ny", indeed.ny, overwrite = TRUE)
dbWriteTable(data.skills.db,"characteristics", characteristics, overwrite = TRUE)
dbWriteTable(data.skills.db,"salary", salary, overwrite = TRUE)
dbWriteTable(data.skills.db,"skills", skills, overwrite = TRUE)
dbWriteTable(data.skills.db,"tech.skills", tech.skills, overwrite = TRUE)
dbListTables(data.skills.db)
setwd("~/data-skills")
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
source("csvs/SQL.R")
source('~/data-skills/csvs/SQL.R', echo=TRUE)
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
source("csvs/SQL.R")
