colnames(OccProj[[1]]) <- c("Title", "Code", "OccupationType", "2016Employment", "2026Employment", "2016EmplChange2016-26", "2026EmplChange2016-26", "2016Self-Empl_Prcnt", "2016-26_AvgAnnual_OccOpenings", "2017MedianAnnualWage", "TypicalEntryLvlEduc", "PreEmplExperience", "PostEmplTraining")
OccProjTbl <- dplyr::tbl_df(OccProj[[1]])
head(OccProjTbl)
OccProj[[1]] <- OccProj[[1]][-1,]
colnames(OccProj[[1]]) <- c("Title", "Code", "OccupationType", "2016Employment", "2026Employment", "2016EmplChange2016-26", "2026EmplChange2016-26", "2016Self-Empl_Prcnt", "2016-26_AvgAnnual_OccOpenings", "2017MedianAnnualWage", "TypicalEntryLvlEduc", "PreEmplExperience", "PostEmplTraining")
OccProjTbl <- dplyr::tbl_df(OccProj[[1]])
Series15 <- dplyr::filter(OccProjTbl, grepl('15-', Code)) %>%
filter(grepl('Line item', OccupationType))
ggplot(Series15, aes(x = TypicalEntryLvlEduc, y = frequency(Code), fill=TypicalEntryLvlEduc)) +
guides(fill=FALSE, color=FALSE)+
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1")+
labs(title = "Typical education needed for entry for 15-000 Computer Occupation", x = "Education", y = "Frequency")
outlook.graphic <- ggplot(Series15, aes(x = PreEmplExperience, y = frequency(Code), fill=PreEmplExperience)) +
guides(fill=FALSE, color=FALSE)+
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1")+
labs(title = "Work experience in a related occupation for 15-000 Computer Occupation", x = "Experience", y = "Frequency")
outlook.graphic
BLS_EP_URL <- read_html("https://www.bls.gov/emp/tables/occupational-projections-and-characteristics.htm")
OccProj <- html_nodes(BLS_EP_URL, "table")
head(OccProj)
OccProj <- BLS_EP_URL %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE)
setwd("~/data-skills")
require(rvest)
require(dplyr)
require(stringr)
require(tidyr)
require(dplyr)
require(ggplot2)
# before spread, to drop unnecessary columns
df_CATO <- dfCATO %>%
select ( jobNoNA, jobcodeNoNA, Skills, SkillIndicator) %>%
group_by(jobNoNA) %>%
spread(Skills,SkillIndicator)
source("../outlook/outlook.Rmd")
require(rvest)
require(dplyr)
require(stringr)
require(tidyr)
require(dplyr)
require(ggplot2)
source("../outlook/outlook.Rmd")
require(rvest)
require(dplyr)
require(stringr)
require(tidyr)
require(dplyr)
require(ggplot2)
BLS_EP_URL <- read_html("https://www.bls.gov/emp/tables/occupational-projections-and-characteristics.htm")
OccProj <- html_nodes(BLS_EP_URL, "table")
head(OccProj)
OccProj <- BLS_EP_URL %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE)
OccProj[[1]] <- OccProj[[1]][-1,]
colnames(OccProj[[1]]) <- c("Title", "Code", "OccupationType", "2016Employment", "2026Employment", "2016EmplChange2016-26", "2026EmplChange2016-26", "2016Self-Empl_Prcnt", "2016-26_AvgAnnual_OccOpenings", "2017MedianAnnualWage", "TypicalEntryLvlEduc", "PreEmplExperience", "PostEmplTraining")
OccProjTbl <- dplyr::tbl_df(OccProj[[1]])
Series15 <- dplyr::filter(OccProjTbl, grepl('15-', Code)) %>%
filter(grepl('Line item', OccupationType))
ggplot(Series15, aes(x = TypicalEntryLvlEduc, y = frequency(Code), fill=TypicalEntryLvlEduc)) +
guides(fill=FALSE, color=FALSE)+
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1")+
labs(title = "Typical education needed for entry for 15-000 Computer Occupation", x = "Education", y = "Frequency")
outlook.graphic <- ggplot(Series15, aes(x = PreEmplExperience, y = frequency(Code), fill=PreEmplExperience)) +
guides(fill=FALSE, color=FALSE)+
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1")+
labs(title = "Work experience in a related occupation for 15-000 Computer Occupation", x = "Experience", y = "Frequency")
outlook.graphic
OccProj[[1]] <- OccProj[[1]][-1,]
colnames(OccProj[[1]]) <- c("Title", "Code", "OccupationType", "2016Employment", "2026Employment", "2016EmplChange2016-26", "2026EmplChange2016-26", "2016Self-Empl_Prcnt", "2016-26_AvgAnnual_OccOpenings", "2017MedianAnnualWage", "TypicalEntryLvlEduc", "PreEmplExperience", "PostEmplTraining")
OccProjTbl <- dplyr::tbl_df(OccProj[[1]])
OccProjTbl
OccProj[[1]] <- OccProj[[1]][-1,]
colnames(OccProj[[1]]) <- c("Title", "Code", "OccupationType", "2016Employment", "2026Employment", "2016EmplChange2016-26", "2026EmplChange2016-26", "2016Self-Empl_Prcnt", "2016-26_AvgAnnual_OccOpenings", "2017MedianAnnualWage", "TypicalEntryLvlEduc", "PreEmplExperience", "PostEmplTraining")
OccProjTbl <- dplyr::tbl_df(OccProj[[1]])
outlook.fram <- OccProjTbl
OccProj[[1]] <- OccProj[[1]][-1,]
colnames(OccProj[[1]]) <- c("Title", "Code", "OccupationType", "2016Employment", "2026Employment", "2016EmplChange2016-26", "2026EmplChange2016-26", "2016Self-Empl_Prcnt", "2016-26_AvgAnnual_OccOpenings", "2017MedianAnnualWage", "TypicalEntryLvlEduc", "PreEmplExperience", "PostEmplTraining")
OccProjTbl <- dplyr::tbl_df(OccProj[[1]])
outlook.frame <- OccProjTbl
outlook.frame
source("/outlook/outlook.Rmd")
source("/outlook/outlook.R")
setwd("~/data-skills")
source("/outlook/outlook.R")
source("outlook/outlook.Rmd")
source("outlook/outlook.R")
outlook.frame
outlook.graphic
require(ggplot2)
ggplot(big.data, aes(x = "No.Employees", y = "Mean.Annual.Wage" ), )+ geom_point()+
coord_cartesian(ylim = c(50000, 200000), xlim = c(15000,700000))
require(ggplot2)
ggplot(salary.frame, aes(x = "No.Employees", y = "Mean.Annual.Wage" ), )+ geom_point()+
coord_cartesian(ylim = c(50000, 200000), xlim = c(15000,700000))
oes_scrape <- function(URLs){
big.data <- data.frame()
for (url in URLs){
raw.data <- readLines(url)
first <- which(grepl("<table border=\"1\"", raw.data))[1]
last <- which(grepl("</table>", raw.data))[1]
truncated.data <- raw.data[first:last]
html.data <- data.frame(readHTMLTable(truncated.data))
colnames(html.data) <- c("No.Employees", "RSE", "Mean.Hourly.Wage", "Mean.Annual.Wage", "Wage.RSE")
big.data <- rbind(big.data, html.data)
}
return(big.data)
}
salary.frame <- oes_scrape(urls)
require(curl)
require(stringr)
require(XML)
raw.data <- curl_download("https://www.bls.gov/oes/current/oes151111.htm", "OES_dollars.txt")
raw.data <- readLines("https://www.bls.gov/oes/current/oes151111.htm")
list.url <- curl_download("https://www.bls.gov/oes/current/oes_stru.htm#15-0000", "list.html")
#list.data <- readLines()
#first <- which(grepl("15-0000  Computer and Mathematical Occupations", list.data))
#last <-  which(grepl("15-2099  Mathematical Science Occupations, All Other ", list.data))
numbers.list <- c(1111,1121,1122,1131,1132,1133,1134,1141,1142,1143,1151,1152,1199,2011,2031,2041)
urls <- c()
i = 1
for (number in numbers.list){
url = paste(c("https://www.bls.gov/oes/current/oes15",number,".htm"),collapse = "")
urls[i] <- url
i = i + 1
}
urls
# Regex for all text between two table
first <- which(grepl("<table border=\"1\"", raw.data))[1]
last <- which(grepl("</table>", raw.data))[1]
truncated.data <- raw.data[first:last]
html.data <- data.frame(readHTMLTable(truncated.data))
colnames(html.data) <- c("No. of Employees", "RSE", "Mean Hourly Wage", "Mean Annual Wage", "Wage RSE")
html.data
oes_scrape <- function(URLs){
big.data <- data.frame()
for (url in URLs){
raw.data <- readLines(url)
first <- which(grepl("<table border=\"1\"", raw.data))[1]
last <- which(grepl("</table>", raw.data))[1]
truncated.data <- raw.data[first:last]
html.data <- data.frame(readHTMLTable(truncated.data))
colnames(html.data) <- c("No.Employees", "RSE", "Mean.Hourly.Wage", "Mean.Annual.Wage", "Wage.RSE")
big.data <- rbind(big.data, html.data)
}
return(big.data)
}
salary.frame <- oes_scrape(urls)
salary.frame
require(ggplot2)
ggplot(salary.frame, aes(x = "No.Employees", y = "Mean.Annual.Wage" ), )+ geom_point()+
coord_cartesian(ylim = c(50000, 200000), xlim = c(15000,700000))
require(ggplot2)
qplot(salary.frame, aes(x = "No.Employees", y = "Mean.Annual.Wage" ), )+ geom_point()+
coord_cartesian(ylim = c(50000, 200000), xlim = c(15000,700000))
require(ggplot2)
ggplot(salary.frame, aes(x = "No.Employees", y = "Mean.Annual.Wage" )) +  geom_point()
require(ggplot2)
ggplot(salary.frame, aes(x = "No.Employees", y = "Mean.Annual.Wage" )) +  geom_point()
summary(salary.frame$No.Employees)
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
skills.frame <- df.Skills
skills.frame
#t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
# kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
#row_spec(row = 0:0, background = "#D4E0F7") %>%
#column_spec(column = 1, bold = T)
#t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
skills.frame <- widekills
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
skills.frame <- wideskills
skills.frame
#t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
# kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
#row_spec(row = 0:0, background = "#D4E0F7") %>%
#column_spec(column = 1, bold = T)
#t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
skills.frame <- wideskills
skills.frame
length(skills.frame$SOC)
#t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
# kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
#row_spec(row = 0:0, background = "#D4E0F7") %>%
#column_spec(column = 1, bold = T)
#t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
skills.frame <- wideskills
skills.frame
#t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
# kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
#row_spec(row = 0:0, background = "#D4E0F7") %>%
#column_spec(column = 1, bold = T)
#t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
skills.frame <- wideskills
skills.frame
t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
skills.frame <- wideskills
skills.frame
t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
t
df.skills
# Need help turning this into T/F output
wideskills <- skillsdf %>% # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC) %>% # Create variable groupings
arrange(SOC, desc(Value)) %>% # Sort elements by Value
top_n(5, Value) %>% # Includes more than n rows if there are ties
spread(Element, Value, fill = F) # Create wide dataset and sets NA values to 0
# Knitr Table to view output
w <- knitr::kable(wideskills, caption = 'Wide Skills Output', format = "html") %>%
kable_styling(bootstrap_options = c("condensed"), full_width = F, position = "left") %>%
row_spec(row = 0:0, background = "#D4E0F7") %>%
column_spec(column = 1, bold = T)
w
# This may actually be a better version of the wideskill df, but also requires assistance.
df.Skills <- skillsdf %>%  # Create dataframe
rename(SOC = df.O.NET.SOC.Code, Element = df.Element.Name, Value = df.Data.Value) %>% # Rename columns
group_by(SOC, Element, Value) %>% # Create variable groupings
count(SOC) %>% # Create column n for every SOC/Element combindation
spread(SOC, n, fill = F)  %>% # Create wide dataset and sets NA values to 0
ungroup(SOC) %>% # Remove SOC from grouping
arrange(Element, desc(Value)) %>% # Sort elements by Value
mutate(SOC.Count = rowSums(.[3:18])) %>% # Sum SOC codes counts per element
filter(Value > 3) %>% # filters for significant values only (3/7 relevance or more)
group_by(Element) %>% # new grouping
summarise(avgvalue = mean(Value), n = sum(SOC.Count)) %>% # skills summary
arrange(desc(avgvalue))%>% # sort
top_n(5, avgvalue)  # select top 5 avg value skills
skills.frame <- wideskills
skills.frame
#t <- knitr::kable(df.Skills, caption = 'Output', format = "html") %>%
# kable_styling(bootstrap_options = c("condensed"), full_width = F, position #= "left") %>%
#  row_spec(row = 0:0, background = "#D4E0F7") %>%
#  column_spec(column = 1, bold = T)
#t
df.Skills
source('~/data-skills/onet/skills.R', echo=TRUE)
source("outlook/outlook.R")
source("onet/skills.R")
source("outlook/outlook.R")
source("onet/skills.R")
source("outlook/outlook.R")
source("onet/skills.R")
outlook.frame
outlook.graphic
skills.frame
source("outlook/outlook.R")
source("onet/skills.R")
outlook.frame
outlook.graphic
outlook.graphic2
skills.frame
require(ggplot2)
ggplot(salary.frame, aes(x = No.Employees, y = Mean.Annual.Wage )) +  geom_point() +
summary(salary.frame$No.Employees)
require(ggplot2)
ggplot(salary.frame, aes(x = "No.Employees", y = "Mean.Annual.Wage" )) +  geom_point() +
summary(salary.frame$No.Employees)
oes_scrape <- function(URLs){
big.data <- data.frame()
for (url in URLs){
raw.data <- readLines(url)
first <- which(grepl("<table border=\"1\"", raw.data))[1]
last <- which(grepl("</table>", raw.data))[1]
truncated.data <- raw.data[first:last]
html.data <- data.frame(readHTMLTable(truncated.data))
colnames(html.data) <- c("No.Employees", "RSE", "Mean.Hourly.Wage", "Mean.Annual.Wage", "Wage.RSE")
big.data <- rbind(big.data, html.data)
}
return(big.data)
}
salary.frame <- oes_scrape(urls)
salary.frame
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
source("outlook/outlook.R")
source("onet/skills.R")
source("salary/dollars-scrape.R")
source('~/data-skills/onet/skills.R', echo=TRUE)
outlook.frame
outlook.graphic
outlook.graphic2
skills.frame
skill.top
outlook.frame
outlook.graphic
outlook.graphic2
skills.frame
skills.top
source("outlook/outlook.R")
source("onet/skills.R")
source("salary/dollars-scrape.R")
source("outlook/outlook.R")
source("onet/skills.R")
source("salary/dollars-scrape.R")
source('~/data-skills/onet/skills.R', echo=TRUE)
source('~/data-skills/onet/skills.R', echo=TRUE)
source('~/data-skills/onet/skills.R', echo=TRUE)
source("salary/dollars-scrape.R")
source('~/data-skills/onet/skills.R', echo=TRUE)
source('~/data-skills/onet/skills.R', echo=TRUE)
