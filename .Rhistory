ieee.manufacturers.per.country <- joinCountryData2Map(per_country, joinCode = "ISO2", nameJoinColumn = "country")
mapCountryData(ieee.manufacturers.per.country, nameColumnToPlot = "number", mapTitle ="Distinct IEEE Manufacturers per Country", addLegend =FALSE, colourPalette =  "heat", missingCountryCol = "black", oceanCol = "black" )
full.name <- countrycode(per_country$country, "iso2c", "country.name", nomatch = NULL )
per_country <- cbind(per_country, full.name)
per_country
ieee.manufacturers.per.country <- joinCountryData2Map(per_country, joinCode = "ISO2", nameJoinColumn = "country")
mapCountryData(ieee.manufacturers.per.country, nameColumnToPlot = "number", mapTitle ="Distinct IEEE Manufacturers per Country", addLegend =FALSE, colourPalette =  "heat", missingCountryCol = "black", oceanCol = "black" )
suppressMeassages(library(tidyverse))
full.name <- countrycode(per_country$country, "iso2c", "country.name", nomatch = NULL )
per_country <- cbind(per_country, full.name)
per_country
ieee.manufacturers.per.country <- joinCountryData2Map(per_country, joinCode = "ISO2", nameJoinColumn = "country")
mapCountryData(ieee.manufacturers.per.country, nameColumnToPlot = "number", mapTitle ="Distinct IEEE Manufacturers per Country", addLegend =FALSE, colourPalette =  "heat", missingCountryCol = "black", oceanCol = "black" )
suppressMeassages(library(tidyverse))
#install.packages("countrycode")
#install.packages("rworldmap")
supppresMessages(library(countrycode))
#install.packages("countrycode")
#install.packages("rworldmap")
suppressMessages(library(countrycode))
suppressMessages(library(rworldmap))
full.name <- countrycode(per_country$country, "iso2c", "country.name", nomatch = NULL )
per_country <- cbind(per_country, full.name)
per_country
ieee.manufacturers.per.country <- joinCountryData2Map(per_country, joinCode = "ISO2", nameJoinColumn = "country")
mapCountryData(ieee.manufacturers.per.country, nameColumnToPlot = "number", mapTitle ="Distinct IEEE Manufacturers per Country", addLegend =FALSE, colourPalette =  "heat", missingCountryCol = "black", oceanCol = "black" )
supressMessages(library(curl))
supressMessages(library(curl))
library(curl)
supressMessages(library(XML))
library(curl)
library(XML)
supressMessages(library(stringr))
library(curl)
library(XML)
library(stringr)
supressMessages(library(tidyverse))
library(curl)
library(XML)
library(stringr)
supressMessages(library(tidyverse))
library(curl)
library(XML)
library(stringr)
library(tidyverse, quietly = TRUE)
library(curl, quietly = TRUE)
library(XML, quietly= TRUE)
library(stringr, quietly= TRUE)
library(tidyverse, quietly = TRUE)
library(curl, quietly = TRUE)
library(XML, quietly= TRUE)
library(stringr, quietly= TRUE)
suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
full.name <- countrycode(per_country$country, "iso2c", "country.name", nomatch = NULL )
per_country <- cbind(per_country, full.name)
per_country
ieee.manufacturers.per.country <- joinCountryData2Map(per_country, joinCode = "ISO2", nameJoinColumn = "country")
mapCountryData(ieee.manufacturers.per.country, nameColumnToPlot = "number", mapTitle ="Distinct IEEE Manufacturers per Country", addLegend =FALSE, colourPalette =  "heat", missingCountryCol = "black", oceanCol = "black" )
full.name <- countrycode(per_country$country, "iso2c", "country.name", nomatch = NULL )
per_country <- cbind(per_country, full.name)
ieee.manufacturers.per.country <- joinCountryData2Map(per_country, joinCode = "ISO2", nameJoinColumn = "country")
mapCountryData(ieee.manufacturers.per.country, nameColumnToPlot = "number", mapTitle ="Distinct IEEE Manufacturers per Country", addLegend =FALSE, colourPalette =  "heat", missingCountryCol = "black", oceanCol = "black" )
per_country <- cbind(per_country, populations)
cities <- unique(trimws(data$City)) #cleaning
connections_per_city <- data.frame()
for (city in cities){ #counting
connections <- dim(subset(data, City == city))[1]
new.row <- cbind(city, connections)
connections_per_city <- rbind(new.row, connections_per_city)
}
one <- sum(connections_per_city$connections == 1) #binning
two <- sum(connections_per_city$connections == 2)
three <- sum(connections_per_city$connections == 3)
four <- sum(connections_per_city$connections >= 4)
distribution <- cbind(one, two, three, four)
barplot(distribution, legend.text = "Number of Connections within City")
write.csv(data, file = "IXPs.csv")
cities <- unique(trimws(data$City)) #cleaning
connections_per_city <- data.frame()
for (city in cities){ #counting
connections <- dim(subset(data, City == city))[1]
new.row <- cbind(city, connections)
connections_per_city <- rbind(new.row, connections_per_city)
}
one <- sum(connections_per_city$connections == 1) #binning
two <- sum(connections_per_city$connections == 2)
three <- sum(connections_per_city$connections == 3)
four <- sum(connections_per_city$connections == 4)
distribution <- cbind(one, two, three, four)
barplot(distribution, legend.text = "Number of Connections within City")
write.csv(data, file = "IXPs.csv")
library(curl, quietly = TRUE)
library(XML, quietly= TRUE)
library(stringr, quietly= TRUE)
suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
data.file <- curl_download("https://en.wikipedia.org/wiki/List_of_Internet_exchange_points_by_size", "IXPs/ixps.html")
raw.data <- readHTMLTable(data.file)
data <- data.frame(raw.data[])
colnames(data) <- as.character(unlist(data[1,]))
data = data[-1, ]
head(data)
data <- mutate(data, City = strsplit(as.character(City), ",")) %>%
unnest(City)
cities <- unique(trimws(data$City)) #cleaning
connections_per_city <- data.frame()
for (city in cities){ #counting
connections <- dim(subset(data, City == city))[1]
new.row <- cbind(city, connections)
connections_per_city <- rbind(new.row, connections_per_city)
}
one <- sum(connections_per_city$connections == 1) #binning
two <- sum(connections_per_city$connections == 2)
three <- sum(connections_per_city$connections == 3)
four <- sum(connections_per_city$connections == 4)
distribution <- cbind(one, two, three, four)
barplot(distribution, legend.text = "Number of Connections within City")
write.csv(data, file = "IXPs.csv")
cities <- unique(trimws(data$City)) #cleaning
connections_per_city <- data.frame()
for (city in cities){ #counting
connections <- dim(subset(data, City == city))[1]
new.row <- cbind(city, connections)
connections_per_city <- rbind(new.row, connections_per_city)
}
one <- sum(connections_per_city$connections == 1) #binning
two <- sum(connections_per_city$connections == 2)
three <- sum(connections_per_city$connections == 3)
four <- sum(connections_per_city$connections == 4)
five <- sum(connections_per_city$connections == 5)
distribution <- cbind(one, two, three, four)
barplot(distribution, legend.text = "Number of Connections within City")
write.csv(data, file = "IXPs.csv")
cities <- unique(trimws(data$City)) #cleaning
connections_per_city <- data.frame()
for (city in cities){ #counting
connections <- dim(subset(data, City == city))[1]
new.row <- cbind(city, connections)
connections_per_city <- rbind(new.row, connections_per_city)
}
one <- sum(connections_per_city$connections == 1) #binning
two <- sum(connections_per_city$connections == 2)
three <- sum(connections_per_city$connections == 3)
four <- sum(connections_per_city$connections == 4)
five <- sum(connections_per_city$connections == 5)
distribution <- cbind(one, two, three, four, five)
barplot(distribution, legend.text = "Number of Connections within City")
write.csv(data, file = "IXPs.csv")
pgeom(8,.1)
pgeom(q = 9,.9)
pgeom(q = 9,.1)
dgeom(q = 9,.1)
dgeom(x = 8, prob = .1)
dexp(x = 8, rate = .1)
dexp(x = 9, rate = .1)
dexp(x = 9-, rate = .1)
dexp(x = 9, rate = .1)
dexp(x = 8, rate = .1)
dgeom(x = 8, prob = .1)
dbinom(x = 8, prob = .1)
dbinom(x = 8, prob = .1)
dbinom(x = 8, prob = .1)
dbinom(size = 8, prob = .1)
dbinom(0,8,.1)
dbinom(0,8,.1)
dgeom(x = 8, prob = .1)
pbinom(0,8,.1)
dbinom(0,8,.1)
qbinom(0,8,.1)
dbinom(0,8,.1)
pbinom(0,8,.1)
dbinom(0,8,.1)
dpoiss(x = 8, prob = .1)
dpois(x = 8, lambda = .8)
dpois(8, lambda = 10)
dpois(8, lambda = .8)
dpois(8, lambda = .1)
dpois(x = 8, lambda = 10)
dgeom(x = 8, prob = .1)
dbinom(8,0,.1)
dbinom(0,8,.1)
dexp(x = 8, rate = 10)
dexp(x = 8, rate = .1)
setwd("~/data-skills")
source('~/data-skills/outlook/outlook.R', echo=TRUE)
outlook.frame
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
setwd("~/data-skills")
require(XML) #for reading xml, html
require(stringr) #for regex
require(curl)
require(tidyr)
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechSkills.txt")
df<- read.table("TechSkills.txt", sep = '\t', header = TRUE)
df<- read.csv("TechSkills.txt", sep = '\t', header = TRUE)
df <- df[grep("15-", df$O.NET.SOC.Code),]
df$O.NET.SOC.Code <- substr(x = df$O.NET.SOC.Code, 4, 7) #drops sub occupation data
df <- df[grep("IM", df$Scale.ID),] # only cares about importance data
unique(df$Element.Name)
df
skills <- unique(df$Element.Name)
names <- unique(df$O.NET.SOC.Code)
print("************")
df$Element.Name
## TO DO MATch skills with list
small.data <- data.frame(c(df$O.NET.SOC.Code, df$Element.Name), ncol=2)
df<- read.csv("TechSkills.txt", sep = '\t', header = TRUE)
df <- df[grep("15-", df$O.NET.SOC.Code),]
df
df<- read.csv("TechSkills.txt", sep = '\t', header = TRUE, quote = "")
df <- df[grep("15-", df$O.NET.SOC.Code),]
df
df$O.NET.SOC.Code <- substr(x = df$O.NET.SOC.Code, 4, 7) #drops sub occupation data
df <- df[grep("IM", df$Scale.ID),] # only cares about importance data
unique(df$Element.Name)
df
df$O.NET.SOC.Code <- substr(x = df$O.NET.SOC.Code, 4, 7) #drops sub occupation data
df
df<- read.csv("TechSkills.txt", sep = '\t', header = TRUE, quote = "")
df <- df[grep("15-", df$O.NET.SOC.Code),]
df
df$O.NET.SOC.Code <- substr(x = df$O.NET.SOC.Code, 4, 7) #drops sub occupation data
df
skills <- unique(df$Element.Name)
names <- unique(df$O.NET.SOC.Code)
print("************")
df$Element.Name
## TO DO MATch skills with list
small.data <- data.frame(c(df$O.NET.SOC.Code, df$Element.Name), ncol=2)
small.data <- data.frame(small.data)
colnames(small.data) <- c("Code", "Skill")
small.data
#test <- spread(small.data, key = "Code", value = "Skill")
#test
suppressWarnings(library(XML, quietly =TRUE)) #for reading xml, html
suppressWarnings(library(stringr, quietly =TRUE)) #for regex
suppressWarnings(library(curl, quietly =TRUE)) #for downloading url file
suppressWarnings(library(tidyr, quietly =TRUE)) #for data manipulation
suppressWarnings(library(dplyr, quietly =TRUE)) #for data manipulation
suppressWarnings(library(ggplot2, quietly =TRUE)) #for graphs
suppressWarnings(library(knitr, quietly =TRUE)) #for table design
suppressWarnings(library(kableExtra, quietly =TRUE)) #for table design
try(setwd('skills'))
setwd("~/data-skills")
suppressWarnings(library(XML, quietly =TRUE)) #for reading xml, html
suppressWarnings(library(stringr, quietly =TRUE)) #for regex
suppressWarnings(library(curl, quietly =TRUE)) #for downloading url file
suppressWarnings(library(tidyr, quietly =TRUE)) #for data manipulation
suppressWarnings(library(dplyr, quietly =TRUE)) #for data manipulation
suppressWarnings(library(ggplot2, quietly =TRUE)) #for graphs
suppressWarnings(library(knitr, quietly =TRUE)) #for table design
suppressWarnings(library(kableExtra, quietly =TRUE)) #for table design
try(setwd('skills'))
curl_download("https://www.onetcenter.org/dl_files/database/db_23_0_text/Tools%20and%20Technology.txt", "TechSkills.txt")
source('~/data-skills/skills/tech-skills-list.R', echo=TRUE)
techtype
tech.frame
suppressWarnings(source("outlook/outlook.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
source('~/data-skills/salary/dollars-scrape.R', echo=TRUE)
suppressWarnings(source("outlook/outlook.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
tech.frame
tech.top
head(job_listings_keyword_count_ca,5)
bplotCA
head(salary.frame, 5)
mean(as.numeric(salary.frame$Mean.Annual.Wage))
sd(as.numeric(salary.frame$Mean.Annual.Wage))
best_pay <-  max(as.numeric(salary.frame$Mean.Annual.Wage))
best_pay
best_pay <-  max(as.numeric(salary.frame$Mean.Annual.Wage))
best_pay
tech.top
head(job_listings_keyword_count_ny,5)
bplotNY
head(job_listings_keyword_count_ca,5)
bplotCA
suppressWarnings(source("characteristics/characteristics"))
setwd("~/data-skills")
suppressWarnings(source("characteristics/characteristics"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech-skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
source('~/data-skills/tech_skills/tech-skills-list.R', echo=TRUE)
setwd("~/data-skills")
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
setwd("~/data-skills")
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
setwd("~/data-skills")
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
characteristics.graphic
characteristics.graphic
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
characteristics.graphic
characteristics.graphic2
head(salary.frame, 5)
mean(as.numeric(salary.frame$Mean.Annual.Wage))
sd(as.numeric(salary.frame$Mean.Annual.Wage))
best_pay <-  max(as.numeric(salary.frame$Mean.Annual.Wage))
best_pay
head(skills.frame,5)
skills.top
salary.vs.outlook <- na.omit(merge(salary.frame, outlook.frame, by = 'SOC', all = TRUE))
dollars <- as.numeric(salary.vs.outlook$Mean.Annual.Wage)
jobs <- as.numeric(salary.vs.outlook$`2016-26_AvgAnnual_OccOpenings`)
df <- data.frame(cbind(dollars,jobs))
ggplot(df, aes(x=dollars, y=jobs)) + geom_point()
tech.top
head(job_listings_keyword_count_ca,5)
bplotCA
head(job_listings_keyword_count_ny,5)
bplotNY
skills.top
salary.vs.outlook <- na.omit(merge(salary.frame, outlook.frame, by = 'SOC', all = TRUE))
dollars <- as.numeric(salary.vs.outlook$Mean.Annual.Wage)
jobs <- as.numeric(salary.vs.outlook$`2016-26_AvgAnnual_OccOpenings`)
df <- data.frame(cbind(dollars,jobs))
ggplot(df, aes(x=dollars, y=jobs)) + geom_point()
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
suppressWarnings(source("salary/dollars-scrape.R"))
suppressWarnings(source("characteristics/characteristics.R"))
suppressWarnings(source("indeed/Indeed_Skills.R"))
suppressWarnings(source("onet/skills.R"))
suppressWarnings(source("tech_skills/tech-skills-list.R"))
api.key <- d91ad4b850a54ec3b69ce5fa515c43e3
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
install.packages("devtools")
library(devtools)
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
url = "https://api.nytimes.com/svc/news/v3/content/all/all.json
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
url = "https://api.nytimes.com/svc/news/v3/content/all/all.json"
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
url = "https://api.nytimes.com/svc/news/v3/content/all/all.json"
req <- fromJSON(paste0(url, article_key))
library(devtools)
library(jsonlite)
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
url = "https://api.nytimes.com/svc/news/v3/content/all/all.json"
req <- fromJSON(paste0(url, article_key))
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
url = "https://api.nytimes.com/svc/news/v3/content/all/all.json"
req <- fromJSON(paste0(url, api.key))
api.key <- "d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
url = "https://api.nytimes.com/svc/news/v3/content/all/all.json"
req <- fromJSON(paste0(url, api.key))
api.key <- "&api-key=d91ad4b850a54ec3b69ce5fa515c43e3"
api.key
url = "https://api.nytimes.com/svc/news/v3/content/all/all.json"
req <- fromJSON(paste0(url, api.key))
article_key <- "&api-key=b75da00e12d54774a2d362adddcc9bef"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism"
req <- fromJSON(paste0(url, article_key))
articles <- req$response$docs
colnames(articles)
article_key <- "&api-key=b75da00e12d54774a2d362adddcc9bef"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism"
req <- fromJSON(paste0(url, article_key))
articles <- req$response$docs
colnames(articles$keywords)
article_key <- "&api-key=b75da00e12d54774a2d362adddcc9bef"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism"
req <- fromJSON(paste0(url, article_key))
articles <- req$response$docs
articles
api.key <- "&api-key=d91ad4b850a54ec3b69ce5fa515c43e3"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=trump+racism"
req <- fromJSON(paste0(url, api.key))
articles <- req$response$docs
articles
api.key <- "&api-key=d91ad4b850a54ec3b69ce5fa515c43e3"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=conspiracy"
req <- fromJSON(paste0(url, api.key))
articles <- req$response$docs
articles
bplotNY<-ggplot(relational_data_NY, aes(x=factor(Keyword, levels=names(sort(table(Keyword),decreasing=FALSE))), y=1, fill = Keyword)) +
geom_bar(stat="identity")+theme_minimal() + geom_text(aes(label = ..count.., y= ..prop..), stat= "count", vjust = -.5, colour = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_flip() +  xlab("Skills") + ylab("Count") +
ggtitle("Senior Level Data Scientist Skills search from Indeed NY")
bplotNY
bplotCA<-ggplot(relational_data_ca, aes(x=factor(Keyword, levels=names(sort(table(Keyword),decreasing=FALSE))), y=1, fill = Keyword)) +
geom_bar(stat="identity")+theme_minimal() + geom_text(aes(label = ..count.., y= ..prop..), stat= "count", vjust = -.5, colour = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_flip() +  xlab("Skills") + ylab("Count") +
ggtitle("Senior Data Scientist Skills search from Indeed CA")
bplotCA
